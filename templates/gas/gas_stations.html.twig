{% extends 'base.html.twig' %}

{% block title %}
    Gas Stations
{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"/>
{% endblock %}

{% block body %}
    <div class="row">
        <div id="panel">
            <div class="menu-list">
                <div class="ui form" id="department">
                    <div class="field">
                        <label for="departments">Liste des départements</label>
                        <select multiple="multiple" id="departments" class="ui search dropdown">
                            {% for department in departments %}
                                <option value="{{ department.1 }}">{{ department.0 }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>

                <div class="ui form" id="city">
                    <div class="field">
                        <label for="cities">Liste des villes</label>
                        <select multiple="multiple" id="cities" class="ui search dropdown">
                            {% for city in gas_cities %}
                                <option value="{{ city.postal_code }}">{{ city.city|trim('1234567890', 'left') }}
                                </option>
                            {% endfor %}
                        </select>
                    </div>
                </div>

                <div class="ui form" id="type">
                    <div class="field">
                        <label for="types">Types de carburants</label>
                        <select multiple="multiple" id="types" class="ui search dropdown">
                            {% for type in gas_types %}
                                <option value="{{ type.id }}">{{ type.name }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>

                <div class="ui form" id="service">
                    <div class="field">
                        <label for="services">Liste des services</label>
                        <select multiple="multiple" id="services" class="ui search dropdown">
                            {% for service in gas_services %}
                                <option value="{{ service.id }}">{{ service.name }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>

                <div class="ui form" id="reset">
                    <button class="ui google plus button">Reset</button>
                </div>
            </div>
        </div>
        <div id="map" class="gas_stations"></div>
    </div>
{% endblock %}

{% block javascripts %}
    <script type="application/javascript" src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"></script>
    <script  type="application/javascript">
        var gas_stations_limit_cookie = $.cookie('gas_stations_limit_cookie');
        if (gas_stations_limit_cookie === undefined) {
            $.cookie('gas_stations_limit_cookie', uniqid(), { expires: 31, path: '/' });
            $('#app_gas_stations').append('<div class="ui positive small message gas_stations_limit"><i class="close icon"></i><div class="header">Dans un soucis de performance, seulement 500 stations peuvent être affichées en même temps.</div><p>Pour trouver la bonne, n\'hésitez pas à déplacer la carte pour la mettre à jour !.</p></div>')
        }

        $('.gas_stations_limit .close').click(function () {
            $('.gas_stations_limit').remove()
        })
    </script>
    <script  type="application/javascript">
        const defaultCoordinate = {'latitude': 48.855680, 'longitude': 2.347045}
        var gLongitude, gLatitude, gRadius
        var map, infoWindow, markersIn = [], stations = [], object = {}, low_prices = {}, types = [], services = [], cities = [], departments = []
        var marker = 'marker'

        map = L.map('map').setView([defaultCoordinate.latitude, defaultCoordinate.longitude], 12)

        map.scrollWheelZoom.disable()

        L.control.scale().addTo(map)

        L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
            maxZoom: 18,
            id: 'mapbox/outdoors-v11',
            tileSize: 512,
            zoomOffset: -1,
            accessToken: '{{ KEY }}'
        }).addTo(map)

        var group = L.featureGroup().addTo(map)

        var normal = L.icon({
            iconUrl: '{{ asset('asset/img/gas/marker/normal.png') }}',
        })

        var user = L.icon({
            iconUrl: '{{ asset('asset/img/gas/marker/user.png') }}',
        })

        var low = L.icon({
            iconUrl: '{{ asset('asset/img/gas/marker/low.png') }}',
        })

        map.locate({setView: true, maxZoom: 13})

        function getGasStations(latitude, longitude, radius) {
            gLongitude = longitude
            gLatitude = latitude
            gRadius = radius
            filters = {'cities': cities, 'departments': departments};
            $.get({
                url: '{{ path('app_ajax_gas_stations_map') }}',
                type: 'GET',
                async: true,
                data: {'latitude': latitude, 'longitude': longitude, 'radius': radius - (radius/3), 'filters': filters},
                success: function (elements, statut) {
                    markersIn = []
                    low_prices = {}
                    {% for type in gas_types %}
                        low_prices['{{ type.id }}'] = [null, 1000]
                    {% endfor %}

                    group.clearLayers()

                    stations = JSON.parse(elements)

                    $.each(stations, function(index, element) {
                        object[marker + element.id] = L.marker([parseFloat(element.address.latitude), parseFloat(element.address.longitude)], {icon: normal}).addTo(group).on('click', function(e) {
                            $.get({
                                url: '{{ path('app_ajax_gas_station_id') }}',
                                type: 'GET',
                                async: true,
                                data: {'station_id': element.id},
                                success: function (element, statut) {
                                    $('.gas_station_popup').remove()
                                    var content = "<div class='gas_station_popup'><b class='gas_station_popup_close' onclick='$(\".gas_station_popup\").remove();'></b>" + element['content'] + "</div>"
                                    $('#app_gas_stations').append(content)
                                    low_prices.forEach(function(element, index, array) {
                                        $('.' + element[0] + '.' + element[2]).css('color', 'green')
                                    })
                                }
                            })
                        })

                        markersIn[element.id] = object[marker + element.id]
                    })

                    filter()
                }
            })
        }

        map.on('locationfound', function (e) {
            var radius = e.accuracy
            L.circle(e.latlng, radius).addTo(map)
            var marker = L.marker(e.latlng).addTo(map)
            marker.on('click', function(e) {
                map.setView([parseFloat(e.latlng.lat), parseFloat(e.latlng.lng)])
            })
            return false
        })

        map.on('locationerror', function (e) {
            map.setZoom(13)
            getGasStations(defaultCoordinate.latitude, defaultCoordinate.longitude, 4316.224161749635)
        })

        map.on('moveend', function (e) {
            const { lat, lng } = e.target.getCenter()

            var mapBoundNorthEast = map.getBounds().getNorthEast()
            mapBoundNorthEast.lng = lng
            var mapDistance = mapBoundNorthEast.distanceTo(map.getCenter())

            getGasStations(lat, lng, mapDistance)
        })

        map.on('zoomend', function (e) {
            const { lat, lng } = e.target.getCenter()

            var mapBoundNorthEast = map.getBounds().getNorthEast()
            mapBoundNorthEast.lng = lng
            var mapDistance = mapBoundNorthEast.distanceTo(map.getCenter())

            getGasStations(lat, lng, mapDistance)
        })

        $('.gas_station_popup_close').click(function () {
            $(".gas_station_popup").remove()
        })

        $('#filters .menu-button').click(function () {
            $('#filters .menu-overlay').css('display', 'block')
        })

        $('#filters .menu-overlay').click(function () {
            $('#filters .menu-overlay').css('display', 'none')
        })

        $('#filters .menu-close').click(function () {
            $('#filters .menu-overlay').css('display', 'none')
        })

        $('#type .ui.dropdown').dropdown({
            action: 'activate',
            onChange: function (values, text, items) {
                types = values
                filter()
            }
        })

        $('#service .ui.dropdown').dropdown({
            action: 'activate',
            onChange: function (values, text, items) {
                services = values
                filter()
            }
        })

        $('#city .ui.dropdown').dropdown({
            action: 'activate',
            onChange: function (values, text, items) {
                cities = values
                getGasStations(gLatitude, gLongitude, gRadius)
            }
        })

        $('#department .ui.dropdown').dropdown({
            action: 'activate',
            onChange: function (values, text, items) {
                departments = values
                getGasStations(gLatitude, gLongitude, gRadius)
            }
        })

        $('#reset .button').click(function () {
            $('#service .ui.dropdown').dropdown('clear')
            $('#type .ui.dropdown').dropdown('clear')
            $('#city .ui.dropdown').dropdown('clear')
            $('#department .ui.dropdown').dropdown('clear')
            cities = [], services = [], types = [], departments = []
            filter()
        })

        function filter() {
            low_prices = []
            {% for type in gas_types %}
                low_prices['{{ type.id }}'] = [null, 1000]
            {% endfor %}

            stations.forEach(function(item, index, array) {
                var marker = markersIn[item.id]

                if (typeof (marker) == 'undefined' && marker == null) {
                    return
                }

                marker.setIcon(normal)

                if (!hasTypes(item) && (0 !== types.length)) {
                    map.removeLayer(marker)
                    return
                }

                if (!hasServices(item) && (0 !== services.length)) {
                    map.removeLayer(marker)
                    return
                }

                if (!hasCities(item) && (0 !== cities.length)) {
                    map.removeLayer(marker)
                    return
                }

                if (!hasDepartments(item) && (0 !== departments.length)) {
                    map.removeLayer(marker)
                    return
                }

                $.each(item.prices, function (index, price) {
                    if (parseFloat(price.value) <= parseFloat(low_prices[price.type.id][1])) {
                        low_prices[price.type.id][0] = item.id
                        low_prices[price.type.id][1] = price.value
                        low_prices[price.type.id][2] = price.type.id
                    }
                })

                marker.addTo(group).addTo(map)
            })

            $('.gas_station_popup').remove()

            low_prices.forEach(function(element, index, array) {
                if (types.length !== 0) {
                    var id = element[2]
                    id = id.toString()
                    if (types.includes(id)) {
                        addSpecialIcon(element)
                    }
                    return
                }
                addSpecialIcon(element)
            })
        }

        function addSpecialIcon(element) {
            var marker = markersIn[element[0]]
            if (marker) {
                marker.setIcon(low)
                marker.setZIndexOffset(100)
            }
            $('.' + element[0] + '.' + element[2]).css('color', 'green')
        }

        function hasTypes(item) {
            var isAssociated = false
            $.each(item.prices, function (index, price) {
                var id = price.type.id
                id = id.toString()
                if (types.includes(id)) {
                    isAssociated = true
                }
            })

            return isAssociated
        }

        function hasServices(item) {
            var isAssociated = false
            $.each(item.services, function (index, service) {
                var id = service.id
                id = id.toString()
                if (services.includes(id)) {
                    isAssociated = true
                }
            })

            return isAssociated
        }

        function hasCities(item) {
            var isAssociated = false
            var id = item.address.postal_code
            id = id.toString()
            if (cities.includes(id)) {
                isAssociated = true
            }

            return isAssociated
        }

        function hasDepartments(item) {
            var isAssociated = false
            var id = item.address.postal_code
            id = id.slice(0,2)
            if (departments.includes(id)) {
                isAssociated = true
            }

            return isAssociated
        }

    </script>
{% endblock %}
